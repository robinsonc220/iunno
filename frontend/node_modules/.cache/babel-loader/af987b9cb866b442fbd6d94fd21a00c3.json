{"ast":null,"code":"var _jsxFileName = \"/Users/ravenrosa/Desktop/Flatiron School/Mod5/iunno/frontend/src/Components/Homepage.jsx\";\nimport React from 'react';\nimport { Divider, Progress, Segment, Grid } from 'semantic-ui-react';\nimport Quantity from './Quantity.jsx';\nimport OrderButton from './OrderButton.jsx';\nimport Confirmation from './Confirmation.jsx';\nexport default class Homepage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sessionQty: 0,\n      qtyTerm: \"\",\n      orderCreated: false,\n      removeButton: false,\n      sessionOrder: {},\n      percent: 0\n    };\n\n    this.increment = () => this.setState(prevState => ({\n      percent: prevState.percent >= 100 ? 0 : prevState.percent + 50\n    }));\n\n    this.addQty = () => {\n      this.setState({\n        sessionQty: this.state.qtyTerm\n      });\n    };\n\n    this.handleOnChange = evt => {\n      this.setState({\n        qtyTerm: evt.target.value\n      });\n    };\n\n    this.createOrder = () => {\n      let randomMeal = this.props.chooseMeal();\n      fetch(`http://localhost:3000/api/v1/orders`, {\n        method: 'POST',\n        body: JSON.stringify({\n          user_id: this.props.user.id\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          \"Accept\": \"application/json\"\n        }\n      }).then(res => res.json()).then(data => this.setState({\n        sessionOrder: data\n      }, () => this.createOrderMeal(randomMeal))).then(this.setState({\n        orderCreated: true\n      }));\n    };\n\n    this.createOrderMeal = randomMeal => {\n      // console.log('test', this.state.sessionOrder.id)\n      // console.log('test', randomMeal)\n      fetch(`http://localhost:3000/api/v1/order_meals`, {\n        method: 'POST',\n        body: JSON.stringify({\n          order_id: this.state.sessionOrder.id,\n          meal_id: randomMeal.id\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          \"Accept\": \"application/json\"\n        }\n      }).then(res => res.json()).then(data => console.log(data));\n    };\n\n    this.renderOrderContent = () => {\n      if (this.state.sessionQty > 0 && !this.state.orderCreated) {\n        return React.createElement(OrderButton, {\n          key: 'orderbutton',\n          increment: this.increment,\n          sessionQty: this.state.sessionQty,\n          createOrder: this.createOrder,\n          chooseMeal: this.props.chooseMeal,\n          randomMeal: this.props.randomMeal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        });\n      } else if (this.state.orderCreated === true) {\n        // console.log(this.props.randomMeal)\n        return React.createElement(Confirmation, {\n          key: 'confirmtion',\n          user: this.props.user,\n          randomRestaurant: this.props.randomRestaurant,\n          randomMeal: this.props.randomMeal,\n          sessionOrder: this.state.sessionOrder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(Quantity, {\n          key: 'quantity',\n          user: this.props.user,\n          increment: this.increment,\n          qtyTerm: this.state.qtyTerm,\n          addQty: this.addQty,\n          handleOnChange: this.handleOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.chooseRestaurant();\n  }\n\n  render() {\n    // console.log(this.props.randomMeal)\n    // console.log(this.state.sessionOrder)\n    console.log(this.state.orderCreated);\n    return React.createElement(React.Fragment, null, React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '1vh'\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 1050\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      basic: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.renderOrderContent(), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Progress, {\n      percent: this.state.percent,\n      indicating: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/ravenrosa/Desktop/Flatiron School/Mod5/iunno/frontend/src/Components/Homepage.jsx"],"names":["React","Divider","Progress","Segment","Grid","Quantity","OrderButton","Confirmation","Homepage","Component","state","sessionQty","qtyTerm","orderCreated","removeButton","sessionOrder","percent","increment","setState","prevState","addQty","handleOnChange","evt","target","value","createOrder","randomMeal","props","chooseMeal","fetch","method","body","JSON","stringify","user_id","user","id","headers","then","res","json","data","createOrderMeal","order_id","meal_id","console","log","renderOrderContent","randomRestaurant","componentDidMount","chooseRestaurant","render","height","maxWidth"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Divider, Progress, Segment, Grid } from 'semantic-ui-react'\nimport Quantity from './Quantity.jsx'\nimport OrderButton from './OrderButton.jsx'\nimport Confirmation from './Confirmation.jsx'\n\nexport default class Homepage extends React.Component {\n\n    state = {\n        sessionQty: 0,\n        qtyTerm: \"\",\n        orderCreated: false,\n        removeButton: false,\n        sessionOrder: {},\n        percent: 0\n    }\n\n    componentDidMount() {\n      \nthis.props.chooseRestaurant()\n  \n       \n      }\n\n    increment = () =>\n    this.setState((prevState) => ({\n      percent: prevState.percent >= 100 ? 0 : prevState.percent + 50,\n    }))\n \n    addQty = () => {\n        this.setState({sessionQty: this.state.qtyTerm })\n    }\n\n\n    handleOnChange = (evt) => {\n        this.setState({qtyTerm: evt.target.value})\n\n    }\n\n\n    createOrder = () => {\n      let randomMeal = this.props.chooseMeal();\n\n       fetch(`http://localhost:3000/api/v1/orders`, {\n            method: 'POST',\n            body: JSON.stringify({\n              user_id: this.props.user.id, \n            }),\n            headers:{\n              'Content-Type': 'application/json',\n              \"Accept\": \"application/json\"\n            }\n          })\n          .then(res => res.json())\n          .then(data => this.setState({sessionOrder: data}, () => this.createOrderMeal(randomMeal))) \n          .then(this.setState({orderCreated: true})) \n    }\n\n    createOrderMeal = (randomMeal) => {\n      // console.log('test', this.state.sessionOrder.id)\n      // console.log('test', randomMeal)\n      fetch(`http://localhost:3000/api/v1/order_meals`, {\n            method: 'POST',\n            body: JSON.stringify({\n              order_id: this.state.sessionOrder.id, \n              meal_id: randomMeal.id\n            }),\n            headers:{\n              'Content-Type': 'application/json',\n              \"Accept\": \"application/json\"\n            }\n          })\n          .then(res => res.json())\n          .then(data => console.log(data))\n    }\n\n    renderOrderContent = () => {\n        if (this.state.sessionQty > 0 && !this.state.orderCreated) {\n          return <OrderButton key={'orderbutton'} increment={this.increment} sessionQty={this.state.sessionQty} createOrder={this.createOrder} chooseMeal={this.props.chooseMeal} randomMeal={this.props.randomMeal} />\n        } else if (this.state.orderCreated === true ) {\n          // console.log(this.props.randomMeal)\n          return <Confirmation key={'confirmtion'} user={this.props.user} randomRestaurant={this.props.randomRestaurant} randomMeal={this.props.randomMeal} sessionOrder={this.state.sessionOrder}/>\n        } else {\n          return <Quantity key={'quantity'} user={this.props.user} increment={this.increment} qtyTerm={this.state.qtyTerm} addQty={this.addQty} handleOnChange={this.handleOnChange}/>\n        }\n      }\n\n    render() {\n// console.log(this.props.randomMeal)\n// console.log(this.state.sessionOrder)\nconsole.log(this.state.orderCreated)\n\n        return (\n            <>\n                <Grid textAlign='center' style={{ height: '1vh' }} verticalAlign='middle'>\n                  <Grid.Column style={{ maxWidth: 1050 }}>\n                    <Segment basic>\n                    {this.renderOrderContent()}\n                    {/* <Divider hidden/> */}\n                    <Divider hidden/>\n                    <Progress percent={this.state.percent} indicating />\n                    </Segment>\n                  </Grid.Column>\n                </Grid>\n            </>\n\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}